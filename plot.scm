(define default-coordinate-limits (list 0 -2 1024 2))
(define default-window-size (list 1516 512))
(define default-background-color "white")
(define default-foreground-color "black")
(define (get-right-limit win)
  (call-with-values
    (lambda ()
      (graphics-coordinate-limits win))
    (lambda (x-left y-bottom x-right y-top)
      x-right)))

(define (get-right-device-limit win)
  (call-with-values
    (lambda ()
      (graphics-device-coordinate-limits win))
    (lambda (x-left y-bottom x-right y-top)
      x-right)))

(define (window)
  (let ((win (make-graphics-device #f)))
    (graphics-operation win 'set-background-color default-background-color)
    (graphics-operation win 'set-foreground-color default-foreground-color)
    (apply x-graphics/resize-window win default-window-size)
    (apply graphics-set-coordinate-limits win default-coordinate-limits)
    (graphics-clear win)
    win))

(define clear graphics-clear)

(define x-scale 1)
(define y-scale 1)
(define (plot win stream)
  (let ((limit (* x-scale (get-right-device-limit win))))
    (graphics-set-coordinate-limits win 0 -1 limit 1)
    (let iter ((x 0) (stream stream))
      (if (< x limit)
        (let loop ((coords (stream-car stream)))
          (graphics-draw-point win x (* y-scale (car coords)))
          (if (pair? (cdr coords))
            (loop (cdr coords))
            (iter (1+ x) (stream-cdr stream))))))))