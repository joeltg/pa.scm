(define default-coordinate-limits (list 0 -2 1024 2))
(define default-window-size (list 1516 512))
(define default-background-color "white")
(define default-foreground-color "black")

(define (get-coordinate-limits win)
  (call-with-values
    (lambda ()
      (graphics-coordinate-limits win))
    list))

(define (get-device-coordinate-limits win)
  (call-with-values
    (lambda ()
      (graphics-device-coordinate-limits win))
    list))

(define (window)
  (let ((win (make-graphics-device #f)))
    (graphics-operation win 'set-background-color default-background-color)
    (graphics-operation win 'set-foreground-color default-foreground-color)
    (apply x-graphics/resize-window win default-window-size)
    (apply graphics-set-coordinate-limits win default-coordinate-limits)
    (graphics-clear win)
    win))

(define clear graphics-clear)

(define default-x-scale 1)
(define default-y-scale 1)
(define (plot win stream #!optional color x-scale y-scale)
  (let ((x-scale (if (default-object? x-scale) default-x-scale x-scale))
        (y-scale (if (default-object? y-scale) default-y-scale y-scale)))
    (let ((limit (* x-scale (third (get-device-coordinate-limits win))))
          (color (if (default-object? color) default-foreground-color color)))
      (graphics-set-coordinate-limits win 0 -1 limit 1)
      (graphics-operation win 'set-foreground-color color)
      (let iter ((x 0) (stream stream))
        (if (< x limit)
          (let loop ((coords (stream-car stream)))
            (graphics-draw-point win x (* y-scale (car coords)))
            (if (pair? (cdr coords))
              (loop (cdr coords))
              (iter (1+ x) (stream-cdr stream))))
          (graphics-operation win 'set-foreground-color default-foreground-color))))))